{"version":3,"file":"mockService.js","sources":["utils/mockService.js"],"sourcesContent":["import mockData from '../mock/data.js'\r\n\r\n// 工具函数\r\nexport const utils = {\r\n  // 生成随机ID\r\n  generateId() {\r\n    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\r\n  },\r\n  \r\n  // 获取当前时间格式化\r\n  getCurrentTime() {\r\n    const now = new Date()\r\n    return now.toISOString().slice(0, 19).replace('T', ' ')\r\n  },\r\n  \r\n  // 延迟函数\r\n  delay(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  },\r\n  \r\n  // 保存数据到本地存储\r\n  saveData(key, data) {\r\n    try {\r\n      uni.setStorageSync(key, JSON.stringify(data))\r\n      return true\r\n    } catch (e) {\r\n      console.error('保存数据失败', e)\r\n      return false\r\n    }\r\n  },\r\n  \r\n  // 从本地存储获取数据\r\n  getData(key) {\r\n    try {\r\n      const data = uni.getStorageSync(key)\r\n      return data ? JSON.parse(data) : null\r\n    } catch (e) {\r\n      console.error('获取数据失败', e)\r\n      return null\r\n    }\r\n  },\r\n  \r\n  // 初始化模拟数据\r\n  initMockData() {\r\n    // 检查是否已有数据\r\n    const users = this.getData('users')\r\n    const services = this.getData('services')\r\n    const orders = this.getData('orders')\r\n    \r\n    // 如果没有数据，初始化\r\n    if (!users) {\r\n      this.saveData('users', mockData.users)\r\n    }\r\n    if (!services) {\r\n      this.saveData('services', mockData.services)\r\n    }\r\n    if (!orders) {\r\n      this.saveData('orders', mockData.orders)\r\n    }\r\n  }\r\n}\r\n\r\n// 认证相关服务\r\nexport const authService = {\r\n  // 发送验证码（模拟）\r\n  async sendCode(phone) {\r\n    await utils.delay(500)\r\n    return {\r\n      success: true,\r\n      message: '验证码发送成功'\r\n    }\r\n  },\r\n  \r\n  // 登录\r\n  async login(phone, code) {\r\n    await utils.delay(800)\r\n    // 在实际应用中，这里会校验验证码\r\n    \r\n    const users = utils.getData('users') || mockData.users\r\n    const user = users.find(u => u.phone === phone)\r\n    \r\n    if (user) {\r\n      // 生成token（模拟）\r\n      const token = utils.generateId()\r\n      \r\n      // 保存登录状态\r\n      const loginInfo = {\r\n        token,\r\n        userInfo: user\r\n      }\r\n      \r\n      utils.saveData('loginInfo', loginInfo)\r\n      \r\n      return {\r\n        success: true,\r\n        data: loginInfo\r\n      }\r\n    } else {\r\n      return {\r\n        success: false,\r\n        message: '用户不存在，请先注册'\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 注册\r\n  async register(phone, code, role = 'customer') {\r\n    await utils.delay(800)\r\n    \r\n    const users = utils.getData('users') || [...mockData.users]\r\n    const existingUser = users.find(u => u.phone === phone)\r\n    \r\n    if (existingUser) {\r\n      return {\r\n        success: false,\r\n        message: '手机号已被注册'\r\n      }\r\n    }\r\n    \r\n    // 创建新用户\r\n    const newUser = {\r\n      id: utils.generateId(),\r\n      phone,\r\n      password: '123456', // 默认密码\r\n      nickname: role === 'customer' ? '顾客' + phone.slice(-4) : '商家' + phone.slice(-4),\r\n      avatar: '/static/logo.png',\r\n      role,\r\n      favorites: []\r\n    }\r\n    \r\n    users.push(newUser)\r\n    utils.saveData('users', users)\r\n    \r\n    // 生成token（模拟）\r\n    const token = utils.generateId()\r\n    \r\n    // 保存登录状态\r\n    const loginInfo = {\r\n      token,\r\n      userInfo: newUser\r\n    }\r\n    \r\n    utils.saveData('loginInfo', loginInfo)\r\n    \r\n    return {\r\n      success: true,\r\n      data: loginInfo\r\n    }\r\n  },\r\n  \r\n  // 获取当前登录用户信息\r\n  getCurrentUser() {\r\n    const loginInfo = utils.getData('loginInfo')\r\n    return loginInfo ? loginInfo.userInfo : null\r\n  },\r\n  \r\n  // 退出登录\r\n  logout() {\r\n    utils.saveData('loginInfo', null)\r\n  }\r\n}\r\n\r\n// 服务相关服务\r\nexport const serviceService = {\r\n  // 获取服务列表\r\n  async getServiceList(page = 1, pageSize = 10, status = 'online') {\r\n    await utils.delay(300)\r\n    \r\n    const services = utils.getData('services') || mockData.services\r\n    let filteredServices = services\r\n    \r\n    if (status) {\r\n      filteredServices = services.filter(s => s.status === status)\r\n    }\r\n    \r\n    const start = (page - 1) * pageSize\r\n    const end = start + pageSize\r\n    const paginatedServices = filteredServices.slice(start, end)\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        list: paginatedServices,\r\n        total: filteredServices.length,\r\n        page,\r\n        pageSize\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 获取服务详情\r\n  async getServiceDetail(id) {\r\n    await utils.delay(300)\r\n    \r\n    const services = utils.getData('services') || mockData.services\r\n    const service = services.find(s => s.id === id)\r\n    \r\n    if (service) {\r\n      return {\r\n        success: true,\r\n        data: service\r\n      }\r\n    } else {\r\n      return {\r\n        success: false,\r\n        message: '服务不存在'\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 发布服务（商家）\r\n  async publishService(serviceData) {\r\n    await utils.delay(500)\r\n    \r\n    const services = utils.getData('services') || [...mockData.services]\r\n    const user = authService.getCurrentUser()\r\n    \r\n    if (!user || user.role !== 'merchant') {\r\n      return {\r\n        success: false,\r\n        message: '只有商家才能发布服务'\r\n      }\r\n    }\r\n    \r\n    const newService = {\r\n      id: utils.generateId(),\r\n      ...serviceData,\r\n      merchant: {\r\n        id: user.id,\r\n        name: user.nickname,\r\n        rating: 5.0\r\n      },\r\n      sales: 0,\r\n      createTime: utils.getCurrentTime(),\r\n      status: 'online'\r\n    }\r\n    \r\n    services.push(newService)\r\n    utils.saveData('services', services)\r\n    \r\n    return {\r\n      success: true,\r\n      data: newService\r\n    }\r\n  },\r\n  \r\n  // 更新服务（商家）\r\n  async updateService(id, serviceData) {\r\n    await utils.delay(500)\r\n    \r\n    const services = utils.getData('services') || [...mockData.services]\r\n    const user = authService.getCurrentUser()\r\n    const index = services.findIndex(s => s.id === id)\r\n    \r\n    if (index === -1) {\r\n      return {\r\n        success: false,\r\n        message: '服务不存在'\r\n      }\r\n    }\r\n    \r\n    if (!user || user.role !== 'merchant' || services[index].merchant.id !== user.id) {\r\n      return {\r\n        success: false,\r\n        message: '您无权修改此服务'\r\n      }\r\n    }\r\n    \r\n    services[index] = {\r\n      ...services[index],\r\n      ...serviceData,\r\n      updateTime: utils.getCurrentTime()\r\n    }\r\n    \r\n    utils.saveData('services', services)\r\n    \r\n    return {\r\n      success: true,\r\n      data: services[index]\r\n    }\r\n  },\r\n  \r\n  // 上下架服务（商家）\r\n  async changeServiceStatus(id, status) {\r\n    await utils.delay(300)\r\n    \r\n    const services = utils.getData('services') || [...mockData.services]\r\n    const user = authService.getCurrentUser()\r\n    const index = services.findIndex(s => s.id === id)\r\n    \r\n    if (index === -1) {\r\n      return {\r\n        success: false,\r\n        message: '服务不存在'\r\n      }\r\n    }\r\n    \r\n    if (!user || user.role !== 'merchant' || services[index].merchant.id !== user.id) {\r\n      return {\r\n        success: false,\r\n        message: '您无权操作此服务'\r\n      }\r\n    }\r\n    \r\n    services[index].status = status\r\n    services[index].updateTime = utils.getCurrentTime()\r\n    \r\n    utils.saveData('services', services)\r\n    \r\n    return {\r\n      success: true,\r\n      data: services[index]\r\n    }\r\n  }\r\n}\r\n\r\n// 订单相关服务\r\nexport const orderService = {\r\n  // 创建预约\r\n  async createBooking(bookingData) {\r\n    await utils.delay(500)\r\n    \r\n    const orders = utils.getData('orders') || [...mockData.orders]\r\n    const user = authService.getCurrentUser()\r\n    const services = utils.getData('services') || mockData.services\r\n    \r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        message: '请先登录'\r\n      }\r\n    }\r\n    \r\n    const service = services.find(s => s.id === bookingData.serviceId)\r\n    if (!service) {\r\n      return {\r\n        success: false,\r\n        message: '服务不存在'\r\n      }\r\n    }\r\n    \r\n    const newOrder = {\r\n      id: utils.generateId(),\r\n      userId: user.id,\r\n      serviceId: bookingData.serviceId,\r\n      merchantId: service.merchant.id,\r\n      serviceName: service.name,\r\n      price: service.price,\r\n      bookingTime: bookingData.bookingTime,\r\n      createTime: utils.getCurrentTime(),\r\n      status: 'pending'\r\n    }\r\n    \r\n    orders.push(newOrder)\r\n    utils.saveData('orders', orders)\r\n    \r\n    return {\r\n      success: true,\r\n      data: newOrder\r\n    }\r\n  },\r\n  \r\n  // 获取我的订单\r\n  async getMyOrders(status = '', page = 1, pageSize = 10) {\r\n    await utils.delay(300)\r\n    \r\n    const orders = utils.getData('orders') || mockData.orders\r\n    const user = authService.getCurrentUser()\r\n    \r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        message: '请先登录'\r\n      }\r\n    }\r\n    \r\n    // 根据用户角色筛选订单\r\n    let userOrders = []\r\n    if (user.role === 'customer') {\r\n      userOrders = orders.filter(o => o.userId === user.id)\r\n    } else if (user.role === 'merchant') {\r\n      userOrders = orders.filter(o => o.merchantId === user.id)\r\n    }\r\n    \r\n    // 根据状态筛选\r\n    if (status) {\r\n      userOrders = userOrders.filter(o => o.status === status)\r\n    }\r\n    \r\n    // 分页\r\n    const start = (page - 1) * pageSize\r\n    const end = start + pageSize\r\n    const paginatedOrders = userOrders.slice(start, end)\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        list: paginatedOrders,\r\n        total: userOrders.length,\r\n        page,\r\n        pageSize\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 取消预约\r\n  async cancelBooking(id) {\r\n    await utils.delay(300)\r\n    \r\n    const orders = utils.getData('orders') || [...mockData.orders]\r\n    const user = authService.getCurrentUser()\r\n    const index = orders.findIndex(o => o.id === id)\r\n    \r\n    if (index === -1) {\r\n      return {\r\n        success: false,\r\n        message: '订单不存在'\r\n      }\r\n    }\r\n    \r\n    if (!user || (user.role === 'customer' && orders[index].userId !== user.id)) {\r\n      return {\r\n        success: false,\r\n        message: '您无权操作此订单'\r\n      }\r\n    }\r\n    \r\n    if (orders[index].status !== 'pending') {\r\n      return {\r\n        success: false,\r\n        message: '订单状态不允许取消'\r\n      }\r\n    }\r\n    \r\n    orders[index].status = 'canceled'\r\n    orders[index].updateTime = utils.getCurrentTime()\r\n    \r\n    utils.saveData('orders', orders)\r\n    \r\n    return {\r\n      success: true,\r\n      data: orders[index]\r\n    }\r\n  },\r\n  \r\n  // 确认预约（商家）\r\n  async confirmBooking(id) {\r\n    await utils.delay(300)\r\n    \r\n    const orders = utils.getData('orders') || [...mockData.orders]\r\n    const user = authService.getCurrentUser()\r\n    const index = orders.findIndex(o => o.id === id)\r\n    \r\n    if (index === -1) {\r\n      return {\r\n        success: false,\r\n        message: '订单不存在'\r\n      }\r\n    }\r\n    \r\n    if (!user || user.role !== 'merchant' || orders[index].merchantId !== user.id) {\r\n      return {\r\n        success: false,\r\n        message: '您无权操作此订单'\r\n      }\r\n    }\r\n    \r\n    if (orders[index].status !== 'pending') {\r\n      return {\r\n        success: false,\r\n        message: '订单状态不允许确认'\r\n      }\r\n    }\r\n    \r\n    orders[index].status = 'confirmed'\r\n    orders[index].updateTime = utils.getCurrentTime()\r\n    \r\n    utils.saveData('orders', orders)\r\n    \r\n    return {\r\n      success: true,\r\n      data: orders[index]\r\n    }\r\n  },\r\n  \r\n  // 完成预约（商家）\r\n  async completeBooking(id) {\r\n    await utils.delay(300)\r\n    \r\n    const orders = utils.getData('orders') || [...mockData.orders]\r\n    const user = authService.getCurrentUser()\r\n    const index = orders.findIndex(o => o.id === id)\r\n    \r\n    if (index === -1) {\r\n      return {\r\n        success: false,\r\n        message: '订单不存在'\r\n      }\r\n    }\r\n    \r\n    if (!user || user.role !== 'merchant' || orders[index].merchantId !== user.id) {\r\n      return {\r\n        success: false,\r\n        message: '您无权操作此订单'\r\n      }\r\n    }\r\n    \r\n    if (orders[index].status !== 'confirmed') {\r\n      return {\r\n        success: false,\r\n        message: '订单状态不允许完成'\r\n      }\r\n    }\r\n    \r\n    orders[index].status = 'completed'\r\n    orders[index].updateTime = utils.getCurrentTime()\r\n    \r\n    utils.saveData('orders', orders)\r\n    \r\n    return {\r\n      success: true,\r\n      data: orders[index]\r\n    }\r\n  }\r\n}\r\n\r\n// 收藏相关服务\r\nexport const favoriteService = {\r\n  // 收藏服务\r\n  async addFavorite(serviceId) {\r\n    await utils.delay(300)\r\n    \r\n    const users = utils.getData('users') || [...mockData.users]\r\n    const user = authService.getCurrentUser()\r\n    \r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        message: '请先登录'\r\n      }\r\n    }\r\n    \r\n    const userIndex = users.findIndex(u => u.id === user.id)\r\n    if (userIndex === -1) {\r\n      return {\r\n        success: false,\r\n        message: '用户不存在'\r\n      }\r\n    }\r\n    \r\n    if (users[userIndex].favorites.includes(serviceId)) {\r\n      return {\r\n        success: false,\r\n        message: '已收藏'\r\n      }\r\n    }\r\n    \r\n    users[userIndex].favorites.push(serviceId)\r\n    utils.saveData('users', users)\r\n    \r\n    // 更新当前用户信息\r\n    const loginInfo = utils.getData('loginInfo')\r\n    if (loginInfo) {\r\n      loginInfo.userInfo.favorites = users[userIndex].favorites\r\n      utils.saveData('loginInfo', loginInfo)\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: '收藏成功'\r\n    }\r\n  },\r\n  \r\n  // 取消收藏\r\n  async removeFavorite(serviceId) {\r\n    await utils.delay(300)\r\n    \r\n    const users = utils.getData('users') || [...mockData.users]\r\n    const user = authService.getCurrentUser()\r\n    \r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        message: '请先登录'\r\n      }\r\n    }\r\n    \r\n    const userIndex = users.findIndex(u => u.id === user.id)\r\n    if (userIndex === -1) {\r\n      return {\r\n        success: false,\r\n        message: '用户不存在'\r\n      }\r\n    }\r\n    \r\n    const favoriteIndex = users[userIndex].favorites.indexOf(serviceId)\r\n    if (favoriteIndex === -1) {\r\n      return {\r\n        success: false,\r\n        message: '未收藏此服务'\r\n      }\r\n    }\r\n    \r\n    users[userIndex].favorites.splice(favoriteIndex, 1)\r\n    utils.saveData('users', users)\r\n    \r\n    // 更新当前用户信息\r\n    const loginInfo = utils.getData('loginInfo')\r\n    if (loginInfo) {\r\n      loginInfo.userInfo.favorites = users[userIndex].favorites\r\n      utils.saveData('loginInfo', loginInfo)\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      message: '已取消收藏'\r\n    }\r\n  },\r\n  \r\n  // 获取收藏列表\r\n  async getFavorites(page = 1, pageSize = 10) {\r\n    await utils.delay(300)\r\n    \r\n    const user = authService.getCurrentUser()\r\n    const services = utils.getData('services') || mockData.services\r\n    \r\n    if (!user) {\r\n      return {\r\n        success: false,\r\n        message: '请先登录'\r\n      }\r\n    }\r\n    \r\n    // 获取收藏的服务\r\n    const favoriteServices = services.filter(s => user.favorites.includes(s.id))\r\n    \r\n    // 分页\r\n    const start = (page - 1) * pageSize\r\n    const end = start + pageSize\r\n    const paginatedServices = favoriteServices.slice(start, end)\r\n    \r\n    return {\r\n      success: true,\r\n      data: {\r\n        list: paginatedServices,\r\n        total: favoriteServices.length,\r\n        page,\r\n        pageSize\r\n      }\r\n    }\r\n  },\r\n  \r\n  // 检查服务是否已收藏\r\n  isServiceFavorite(serviceId) {\r\n    const user = authService.getCurrentUser()\r\n    return user && user.favorites && user.favorites.includes(serviceId)\r\n  }\r\n}\r\n\r\n// 初始化数据\r\nutils.initMockData()"],"names":["uni","mockData"],"mappings":"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"}